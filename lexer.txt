TYPE : int
IDENT : i
ASSIGN : =
NUM : 4
PLUS : +
NUM : 5
SEMI : ;
IDENT : x
ASSIGN : =
IDENT : y
SEMI : ;
WHILE : while
LEFT_BRAC : (
IDENT : i
EQUAL : ==
NUM : 0
RIGHT_BRAC : )
LEFT_CURLY : {
IDENT : i
ASSIGN : =
IDENT : i
PLUS : +
NUM : 1
SEMI : ;
RIGHT_CURLY : }
TYPE : char *
IDENT : func1
LEFT_BRAC : (
TYPE : int
IDENT : a
COMMA : ,
TYPE : char *
IDENT : b
RIGHT_BRAC : )
LEFT_CURLY : {
TYPE : int
IDENT : i
ASSIGN : =
NUM : 2
PLUS : +
NUM : 3
SEMI : ;
TYPE : char *
IDENT : s
SEMI : ;
WHILE : while
LEFT_BRAC : (
IDENT : i
GREATER_THAN_EQUAL : >=
NUM : 0
RIGHT_BRAC : )
LEFT_CURLY : {
IDENT : i
ASSIGN : =
IDENT : i
MINUS : +
NUM : 1
SEMI : ;
RIGHT_CURLY : }
WHILE : while
LEFT_BRAC : (
IDENT : s
LEFT_SQ_BRAC : [
NUM : 0
RIGH_SQ_BRAC : ]
RIGHT_BRAC : )
LEFT_CURLY : {
IDENT : s
ASSIGN : =
IDENT : s
PLUS : +
TYPE : stringSEMI : ;
RIGHT_CURLY : }
TYPE : char *
IDENT : y
ASSIGN : =
IDENT : s
SEMI : ;
RETURN : return
IDENT : y
SEMI : ;
RIGHT_CURLY : }
TYPE : int
IDENT : func2
LEFT_BRAC : (
RIGHT_BRAC : )
LEFT_CURLY : {
IDENT : func
LEFT_BRAC : (
RIGHT_BRAC : )
SEMI : ;
RETURN : return
NUM : 2
SEMI : ;
RIGHT_CURLY : }
TYPE : int
IDENT : main
LEFT_BRAC : (
RIGHT_BRAC : )
LEFT_CURLY : {
TYPE : char *
IDENT : s
ASSIGN : =
TYPE : stringSEMI : ;
TYPE : int
IDENT : var
SEMI : ;
TYPE : char *
IDENT : y
SEMI : ;
TYPE : int
IDENT : no
ASSIGN : =
NUM : 100
SEMI : ;
IF : if
LEFT_BRAC : (
IDENT : var
RIGHT_BRAC : )
IDENT : func1
LEFT_BRAC : (
NUM : 9
COMMA : ,
IDENT : s
RIGHT_BRAC : )
SEMI : ;
ELSE : else
LEFT_CURLY : {
TYPE : int
IDENT : num
ASSIGN : =
IDENT : s
LEFT_SQ_BRAC : [
NUM : 0
RIGH_SQ_BRAC : ]
SEMI : ;
RIGHT_CURLY : }
RETURN : return
NUM : 1
SEMI : ;
RIGHT_CURLY : }
